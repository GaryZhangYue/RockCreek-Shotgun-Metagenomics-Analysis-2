
Lmod is automatically replacing "intel/18.0" with "gcc/5.5.0".


Due to MODULEPATH changes, the following have been reloaded:
  1) openmpi/3.1

metawrap binning -o /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING -t 48 -a /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/ASSEMBLY/final_assembly.fasta --metabat2 --maxbin2 --concoct /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/CLEAN_READS/all_1.fastq /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/CLEAN_READS/all_2.fastq

------------------------------------------------------------------------------------------------------------------------
-----                                           Entered read type: paired                                          -----
------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------
-----                                  1 forward and 1 reverse read files detected                                 -----
------------------------------------------------------------------------------------------------------------------------


########################################################################################################################
#####                                     ALIGNING READS TO MAKE COVERAGE FILES                                    #####
########################################################################################################################

Warning: /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING already exists.
rm: cannot remove ‘/home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/*checkm’: No such file or directory

------------------------------------------------------------------------------------------------------------------------
-----                                         making copy of assembly file                                         -----
-----/home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/ASSEMBLY/final_assembly.fasta-----
------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------
-----                                            Indexing assembly file                                            -----
------------------------------------------------------------------------------------------------------------------------

[bwa_index] Pack FASTA... 0.79 sec
[bwa_index] Construct BWT for the packed sequence...
[BWTIncCreate] textLength=220784724, availableWord=27535204
[BWTIncConstructFromPacked] 10 iterations done. 45420420 characters processed.
[BWTIncConstructFromPacked] 20 iterations done. 83910244 characters processed.
[BWTIncConstructFromPacked] 30 iterations done. 118116052 characters processed.
[BWTIncConstructFromPacked] 40 iterations done. 148514212 characters processed.
[BWTIncConstructFromPacked] 50 iterations done. 175528148 characters processed.
[BWTIncConstructFromPacked] 60 iterations done. 199534180 characters processed.
[BWTIncConstructFromPacked] 70 iterations done. 220784724 characters processed.
[bwt_gen] Finished constructing BWT in 70 iterations.
[bwa_index] 61.61 seconds elapse.
[bwa_index] Update BWT... 0.65 sec
[bwa_index] Pack forward-only FASTA... 0.53 sec
[bwa_index] Construct SA from BWT and Occ... 32.97 sec
[main] Version: 0.7.17-r1188
[main] CMD: bwa index /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/assembly.fa
[main] Real time: 96.972 sec; CPU: 96.554 sec

------------------------------------------------------------------------------------------------------------------------
-----                                                   Aligning                                                   -----
-----/home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/CLEAN_READS/all_1.fastq-----
-----                                                     and                                                      -----
-----/home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/CLEAN_READS/all_2.fastq-----
-----                                               back to assembly                                               -----
------------------------------------------------------------------------------------------------------------------------

[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (35, 250, 448)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1274)
[M::mem_pestat] mean and std.dev: (231.17, 178.75)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1687)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (71, 115, 179)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 395)
[M::mem_pestat] mean and std.dev: (130.44, 78.04)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 503)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (39, 89, 442)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1248)
[M::mem_pestat] mean and std.dev: (157.00, 214.70)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1651)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (93, 270, 524)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1386)
[M::mem_pestat] mean and std.dev: (381.70, 401.44)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1987)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (72, 117, 185)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 411)
[M::mem_pestat] mean and std.dev: (133.93, 81.67)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 524)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (38, 80, 500)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1424)
[M::mem_pestat] mean and std.dev: (228.77, 305.87)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1886)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (21, 44, 756)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2226)
[M::mem_pestat] mean and std.dev: (201.20, 317.75)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2961)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (66, 108, 171)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 381)
[M::mem_pestat] mean and std.dev: (124.10, 75.86)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 486)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (41, 158, 1614)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4760)
[M::mem_pestat] mean and std.dev: (695.17, 1025.13)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6333)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (83, 138, 706)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1952)
[M::mem_pestat] mean and std.dev: (241.64, 257.72)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2575)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (70, 115, 182)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 406)
[M::mem_pestat] mean and std.dev: (131.60, 80.78)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 518)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (49, 97, 368)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1006)
[M::mem_pestat] mean and std.dev: (219.54, 290.57)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1382)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (63, 201, 717)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2025)
[M::mem_pestat] mean and std.dev: (373.17, 416.48)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2679)
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (63, 147, 360)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 954)
[M::mem_pestat] mean and std.dev: (162.83, 137.93)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1251)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (64, 103, 162)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 358)
[M::mem_pestat] mean and std.dev: (117.89, 70.68)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 456)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (90, 204, 637)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1731)
[M::mem_pestat] mean and std.dev: (355.04, 327.27)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2278)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (70, 278, 446)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1198)
[M::mem_pestat] mean and std.dev: (241.79, 217.76)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1574)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (7, 20, 560)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1666)
[M::mem_pestat] mean and std.dev: (237.08, 287.14)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2219)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (67, 109, 171)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 379)
[M::mem_pestat] mean and std.dev: (124.47, 75.26)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 483)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (21, 67, 1123)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3327)
[M::mem_pestat] mean and std.dev: (352.11, 589.39)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4429)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (41, 117, 717)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2069)
[M::mem_pestat] mean and std.dev: (334.85, 490.71)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2745)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (51, 566, 1700)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4998)
[M::mem_pestat] mean and std.dev: (866.58, 944.62)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6647)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 118, 185)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 409)
[M::mem_pestat] mean and std.dev: (134.62, 80.75)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 521)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (45, 205, 1041)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3033)
[M::mem_pestat] mean and std.dev: (466.07, 646.69)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4029)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (238, 554, 1016)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2572)
[M::mem_pestat] mean and std.dev: (557.12, 414.37)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3350)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (18, 181, 351)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1017)
[M::mem_pestat] mean and std.dev: (155.23, 149.46)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1350)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (72, 117, 183)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 405)
[M::mem_pestat] mean and std.dev: (133.06, 80.13)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 516)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (38, 110, 281)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 767)
[M::mem_pestat] mean and std.dev: (154.27, 174.26)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1010)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (95, 224, 336)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 818)
[M::mem_pestat] mean and std.dev: (199.00, 144.28)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1059)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (19, 104, 1753)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5221)
[M::mem_pestat] mean and std.dev: (770.25, 1121.84)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6955)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (70, 114, 180)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 400)
[M::mem_pestat] mean and std.dev: (130.49, 79.35)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 510)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (43, 108, 546)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1552)
[M::mem_pestat] mean and std.dev: (298.87, 401.33)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2055)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (150, 303, 545)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1335)
[M::mem_pestat] mean and std.dev: (351.41, 321.72)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1730)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (47, 499, 884)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2558)
[M::mem_pestat] mean and std.dev: (534.80, 600.64)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3395)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (73, 118, 185)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 409)
[M::mem_pestat] mean and std.dev: (134.50, 81.19)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 521)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (52, 164, 700)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1996)
[M::mem_pestat] mean and std.dev: (375.37, 454.23)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2644)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (151, 293, 506)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1216)
[M::mem_pestat] mean and std.dev: (262.55, 208.14)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1571)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (64, 323, 1266)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3670)
[M::mem_pestat] mean and std.dev: (582.22, 804.93)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4872)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (72, 116, 183)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 405)
[M::mem_pestat] mean and std.dev: (132.85, 80.68)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 516)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (47, 101, 794)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2288)
[M::mem_pestat] mean and std.dev: (395.11, 521.34)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3035)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (94, 142, 543)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1441)
[M::mem_pestat] mean and std.dev: (332.40, 327.43)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1890)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (66, 108, 169)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 375)
[M::mem_pestat] mean and std.dev: (123.06, 74.42)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 478)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (51, 323, 997)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2889)
[M::mem_pestat] mean and std.dev: (386.22, 465.78)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3835)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (45, 191, 698)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2004)
[M::mem_pestat] mean and std.dev: (367.55, 472.43)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2657)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (71, 116, 181)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 401)
[M::mem_pestat] mean and std.dev: (131.55, 79.36)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 511)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (54, 144, 506)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1410)
[M::mem_pestat] mean and std.dev: (207.67, 261.58)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1862)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (102, 152, 842)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2322)
[M::mem_pestat] mean and std.dev: (460.73, 599.59)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3062)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (72, 117, 186)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 414)
[M::mem_pestat] mean and std.dev: (134.54, 82.31)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 528)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (85, 142, 1310)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3760)
[M::mem_pestat] mean and std.dev: (451.68, 576.63)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4985)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (6, 128, 435)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1293)
[M::mem_pestat] mean and std.dev: (147.67, 165.27)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1722)
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (100, 224, 551)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1453)
[M::mem_pestat] mean and std.dev: (317.05, 328.27)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1904)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (115, 157, 206)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 388)
[M::mem_pestat] mean and std.dev: (161.33, 68.42)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 479)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (119, 269, 2798)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8156)
[M::mem_pestat] mean and std.dev: (992.10, 1241.34)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10835)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (92, 162, 294)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 698)
[M::mem_pestat] mean and std.dev: (176.21, 122.60)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 900)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (80, 153, 251)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 593)
[M::mem_pestat] mean and std.dev: (172.19, 111.47)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 764)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (121, 160, 207)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 379)
[M::mem_pestat] mean and std.dev: (164.31, 64.77)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 465)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (216, 485, 2977)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8499)
[M::mem_pestat] mean and std.dev: (1326.25, 1301.94)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 11260)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (103, 155, 243)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 523)
[M::mem_pestat] mean and std.dev: (172.09, 119.60)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 663)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (70, 143, 266)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 658)
[M::mem_pestat] mean and std.dev: (155.56, 115.09)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 854)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (121, 160, 207)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 379)
[M::mem_pestat] mean and std.dev: (164.22, 64.64)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 465)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (76, 192, 708)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1972)
[M::mem_pestat] mean and std.dev: (182.31, 193.26)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2604)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (76, 132, 260)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 628)
[M::mem_pestat] mean and std.dev: (172.88, 145.33)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 812)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (90, 143, 312)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 756)
[M::mem_pestat] mean and std.dev: (193.95, 154.47)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 978)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (121, 160, 208)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (164.67, 65.36)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 469)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (90, 1259, 2925)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8595)
[M::mem_pestat] mean and std.dev: (1519.80, 1347.83)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 11430)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (88, 189, 359)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 901)
[M::mem_pestat] mean and std.dev: (234.42, 202.71)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1172)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (72, 144, 313)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 795)
[M::mem_pestat] mean and std.dev: (202.43, 164.95)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1036)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (122, 161, 209)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 383)
[M::mem_pestat] mean and std.dev: (165.59, 65.60)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 470)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (91, 162, 2663)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 7807)
[M::mem_pestat] mean and std.dev: (1034.25, 1192.33)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10379)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (68, 112, 221)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 527)
[M::mem_pestat] mean and std.dev: (140.66, 113.31)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 680)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (98, 180, 342)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 830)
[M::mem_pestat] mean and std.dev: (227.07, 158.62)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1074)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (127, 178, 258)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 520)
[M::mem_pestat] mean and std.dev: (196.13, 100.82)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 651)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (139, 2570, 2885)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8377)
[M::mem_pestat] mean and std.dev: (1657.24, 1295.64)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 11123)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (93, 197, 284)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 666)
[M::mem_pestat] mean and std.dev: (193.57, 126.40)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 857)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (122, 216, 308)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 680)
[M::mem_pestat] mean and std.dev: (221.94, 126.83)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 866)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (138, 214, 329)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 711)
[M::mem_pestat] mean and std.dev: (242.57, 140.28)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 902)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (148, 2560, 2897)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8395)
[M::mem_pestat] mean and std.dev: (1691.54, 1370.05)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 11144)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (116, 203, 287)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 629)
[M::mem_pestat] mean and std.dev: (206.79, 117.10)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 800)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (161, 256, 375)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 803)
[M::mem_pestat] mean and std.dev: (282.71, 171.75)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1017)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (137, 212, 326)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 704)
[M::mem_pestat] mean and std.dev: (240.31, 137.83)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 893)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (140, 706, 2745)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 7955)
[M::mem_pestat] mean and std.dev: (1250.00, 1214.63)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10560)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (139, 208, 376)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 850)
[M::mem_pestat] mean and std.dev: (223.00, 129.75)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1087)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[main] Version: 0.7.17-r1188
[main] CMD: bwa mem -v 1 -t 48 /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/assembly.fa /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/CLEAN_READS/all_1.fastq /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/CLEAN_READS/all_2.fastq
[main] Real time: 404.166 sec; CPU: 9943.157 sec

------------------------------------------------------------------------------------------------------------------------
-----                                        Sorting the all alignment file                                        -----
------------------------------------------------------------------------------------------------------------------------

[bam_sort_core] merging from 0 files and 48 in-memory blocks...

########################################################################################################################
#####                                               RUNNING METABAT2                                               #####
########################################################################################################################


------------------------------------------------------------------------------------------------------------------------
-----                                          making contig depth file...                                         -----
------------------------------------------------------------------------------------------------------------------------

Output depth matrix to /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/metabat_depth.txt
Output matrix to /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/metabat_depth.txt
Opening 1 bams
Consolidating headers
Processing bam files
Thread 0 finished: all.bam with 72165558 reads and 38117859 readsWellMapped
Creating depth matrix file: /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/metabat_depth.txt
Closing most bam files
Closing last bam file
Finished

------------------------------------------------------------------------------------------------------------------------
-----                                       Starting binning with metaBAT2...                                      -----
------------------------------------------------------------------------------------------------------------------------

MetaBAT 2 (v2.12.1) using minContig 1500, minCV 1.0, minCVSum 1.0, maxP 95%, minS 60, and maxEdges 200. 
44 bins (80370298 bases in total) formed.

------------------------------------------------------------------------------------------------------------------------
-----                              metaBAT2 finished successfully, and found 45 bins!                              -----
------------------------------------------------------------------------------------------------------------------------


########################################################################################################################
#####                                                RUNNING MAXBIN2                                               #####
########################################################################################################################


------------------------------------------------------------------------------------------------------------------------
-----                                          making contig depth file...                                         -----
------------------------------------------------------------------------------------------------------------------------

Output depth matrix to /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/mb2_master_depth.txt
Calculating intra contig depth variance
Output matrix to /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/mb2_master_depth.txt
Opening 1 bams
Consolidating headers
Processing bam files
Thread 0 finished: all.bam with 72165558 reads and 38117859 readsWellMapped
Creating depth matrix file: /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/mb2_master_depth.txt
Closing most bam files
Closing last bam file
Finished

------------------------------------------------------------------------------------------------------------------------
-----                    split master contig depth file into individual files for maxbin2 input                    -----
------------------------------------------------------------------------------------------------------------------------

processing all.bam depth file...
MaxBin 2.2.6
No Contig file. Please specify contig file by -contig
MaxBin - a metagenomics binning software.
Usage:
  run_MaxBin.pl
    -contig (contig file)
    -out (output file)

   (Input reads and abundance information)
    [-reads (reads file) -reads2 (readsfile) -reads3 (readsfile) -reads4 ... ]
    [-abund (abundance file) -abund2 (abundfile) -abund3 (abundfile) -abund4 ... ]

   (You can also input lists consisting of reads and abundance files)
    [-reads_list (list of reads files)]
    [-abund_list (list of abundance files)]

   (Other parameters)
    [-min_contig_length (minimum contig length. Default 1000)]
    [-max_iteration (maximum Expectation-Maximization algorithm iteration number. Default 50)]
    [-thread (thread num; default 1)]
    [-prob_threshold (probability threshold for EM final classification. Default 0.9)]
    [-plotmarker]
    [-markerset (marker gene sets, 107 (default) or 40.  See README for more information.)]

  (for debug purpose)
    [-version] [-v] (print version number)
    [-verbose]
    [-preserve_intermediate]

  Please specify either -reads or -abund information.
  You can input multiple reads and/or abundance files at the same time.
  Please read README file for more details.

------------------------------------------------------------------------------------------------------------------------
-----                                       Starting binning with MaxBin2...                                       -----
------------------------------------------------------------------------------------------------------------------------

MaxBin 2.2.6
Input contig: /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/assembly.fa
Thread: 48
Min contig length: 1000
out header: /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin
Located abundance file [/home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/mb2_all.txt]
Searching against 107 marker genes to find starting seed contigs for [/home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/assembly.fa]...
Running FragGeneScan....
Running HMMER hmmsearch....
Done data collection. Running MaxBin...
Command: /home-net/home-4/yzhan231@jhu.edu/.conda/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.contig.tmp  -abund /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.seed -out /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin -min_contig_length 1000 -thread 48
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	NODE_5_length_542707_cov_40.509590 [59.753200]
	NODE_42_length_196545_cov_80.245056 [119.575000]
	NODE_76_length_130501_cov_21.653435 [35.810800]
	NODE_152_length_79483_cov_143.512489 [210.742000]
	NODE_171_length_72481_cov_25.820313 [43.405500]
	NODE_200_length_62606_cov_60.606545 [90.175700]
	NODE_214_length_57843_cov_21.692981 [36.042000]
	NODE_234_length_52800_cov_160.343179 [240.635000]
	NODE_245_length_50897_cov_27.399178 [41.355300]
	NODE_308_length_39243_cov_12.759391 [23.653100]
	NODE_320_length_37615_cov_14.287993 [25.149800]
	NODE_496_length_23642_cov_11.099165 [24.021000]
	NODE_534_length_22043_cov_14.880617 [26.363400]
	NODE_680_length_17344_cov_17.085372 [26.477400]
	NODE_713_length_16580_cov_16.536157 [26.131600]
	NODE_882_length_13363_cov_18.784641 [28.071100]
	NODE_912_length_12957_cov_15.601845 [24.119200]
	NODE_934_length_12682_cov_189.119981 [249.465000]
	NODE_938_length_12645_cov_10.423352 [20.276600]
	NODE_1001_length_11813_cov_44.778789 [62.335600]
	NODE_1193_length_10108_cov_10.697205 [17.258000]
	NODE_1226_length_9826_cov_17.719988 [30.083600]
	NODE_1292_length_9396_cov_8.300396 [14.161900]
	NODE_1908_length_6810_cov_5.552332 [10.086300]
	NODE_2090_length_6305_cov_6.594400 [13.224500]
	NODE_2209_length_6007_cov_8.464550 [15.188000]
	NODE_2513_length_5467_cov_6.091463 [10.202000]
	NODE_3007_length_4823_cov_12.141569 [17.599600]
	NODE_3674_length_4158_cov_5.834268 [10.558100]
	NODE_4838_length_3406_cov_6.488212 [11.802500]
	NODE_5898_length_2983_cov_8.349727 [15.700000]
	NODE_6629_length_2766_cov_4.754703 [8.105500]
	NODE_12792_length_1881_cov_5.417853 [11.496200]
	NODE_17543_length_1599_cov_4.281088 [8.138030]
	k141_355932_length_1161_cov_5.0000 [11.722100]
Get 35 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 1049 (3.90%)
Elapsed time:  0 days 00:09:06
Done data collection. Running MaxBin...
Command: /home-net/home-4/yzhan231@jhu.edu/.conda/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.0001.fasta  -abund /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.0001.out.seed -out /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.0001.out -min_contig_length 1000 -thread 48
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	NODE_5_length_542707_cov_40.509590 [59.753200]
	NODE_67_length_144258_cov_67.311443 [99.916400]
	NODE_191_length_65497_cov_80.988891 [120.066000]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:01
Done data collection. Running MaxBin...
Command: /home-net/home-4/yzhan231@jhu.edu/.conda/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.0011.fasta  -abund /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.0011.out.seed -out /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.0011.out -min_contig_length 1000 -thread 48
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	NODE_1518_length_8174_cov_10.821776 [20.746800]
	NODE_2925_length_4919_cov_15.230880 [23.223100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:01
Done data collection. Running MaxBin...
Command: /home-net/home-4/yzhan231@jhu.edu/.conda/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.0012.fasta  -abund /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.0012.out.seed -out /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.0012.out -min_contig_length 1000 -thread 48
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	NODE_496_length_23642_cov_11.099165 [24.021000]
	NODE_5648_length_3072_cov_6.932715 [18.351100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:00
Done data collection. Running MaxBin...
Command: /home-net/home-4/yzhan231@jhu.edu/.conda/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.0014.fasta  -abund /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.0014.out.seed -out /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.0014.out -min_contig_length 1000 -thread 48
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	NODE_680_length_17344_cov_17.085372 [26.477400]
	NODE_1001_length_11813_cov_44.778789 [62.335600]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:01
Done data collection. Running MaxBin...
Command: /home-net/home-4/yzhan231@jhu.edu/.conda/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.0019.fasta  -abund /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.0019.out.seed -out /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.0019.out -min_contig_length 1000 -thread 48
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	NODE_308_length_39243_cov_12.759391 [23.653100]
	NODE_534_length_22043_cov_14.880617 [26.363400]
	NODE_938_length_12645_cov_10.423352 [20.276600]
	NODE_1226_length_9826_cov_17.719988 [30.083600]
Get 4 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 1 bins without any sequences.
Number of unclassified sequences: 272 (49.45%)
Elapsed time:  0 days 00:00:02
Done data collection. Running MaxBin...
Command: /home-net/home-4/yzhan231@jhu.edu/.conda/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.0020.fasta  -abund /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.0020.out.seed -out /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.0020.out -min_contig_length 1000 -thread 48
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	NODE_65_length_146604_cov_83.784686 [120.490000]
	NODE_221_length_56070_cov_87.883674 [120.272000]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:01
Done data collection. Running MaxBin...
Command: /home-net/home-4/yzhan231@jhu.edu/.conda/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.0024.fasta  -abund /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.0024.out.seed -out /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.0024.out -min_contig_length 1000 -thread 48
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	NODE_186_length_66618_cov_13.665385 [22.740100]
	NODE_388_length_30999_cov_11.928678 [19.971200]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:00
Done data collection. Running MaxBin...
Command: /home-net/home-4/yzhan231@jhu.edu/.conda/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.0028.fasta  -abund /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.0028.out.seed -out /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.0028.out -min_contig_length 1000 -thread 48
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	NODE_477_length_24823_cov_11.626090 [18.255000]
	NODE_8960_length_2291_cov_3.859571 [6.636150]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:01









bin.002.marker.fasta
bin.003.marker.fasta
bin.004.marker.fasta
bin.005.marker.fasta
bin.006.marker.fasta
bin.007.marker.fasta
bin.008.marker.fasta
bin.009.marker.fasta
bin.010.marker.fasta
bin.011.marker.fasta
bin.012.marker.fasta
bin.013.marker.fasta
bin.014.marker.fasta
bin.015.marker.fasta
bin.017.marker.fasta
bin.018.marker.fasta
bin.019.marker.fasta
bin.020.marker.fasta
bin.021.marker.fasta
bin.022.marker.fasta
bin.023.marker.fasta
bin.024.marker.fasta
bin.025.marker.fasta
bin.026.marker.fasta
bin.027.marker.fasta
bin.028.marker.fasta
bin.029.marker.fasta
bin.030.marker.fasta
bin.031.marker.fasta
bin.032.marker.fasta
bin.033.marker.fasta
bin.034.marker.fasta
bin.035.marker.fasta
bin.036.marker.fasta
bin.037.marker.fasta
bin.038.marker.fasta
bin.039.marker.fasta
bin.040.marker.fasta
bin.041.marker.fasta
bin.042.marker.fasta
bin.043.marker.fasta
bin.044.marker.fasta
Deleting intermediate files.


========== Job finished ==========
Yielded 44 bins for contig (scaffold) file /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/assembly.fa

Here are the output files for this run.
Please refer to the README file for further details.

Summary file: /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.summary
Marker counts: /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.marker
Marker genes for each bin: /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.marker_of_each_gene.tar.gz
Bin files: /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.001.fasta - /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.044.fasta
Unbinned sequences: /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/maxbin2_out/bin.noclass


========== Elapsed Time ==========
0 hours 10 minutes and 10 seconds.


------------------------------------------------------------------------------------------------------------------------
-----                               MaxBin2 finished successfully, and found 44 bins!                              -----
------------------------------------------------------------------------------------------------------------------------


########################################################################################################################
#####                                                RUNNING CONCOCT                                               #####
########################################################################################################################


------------------------------------------------------------------------------------------------------------------------
-----                                       indexing .bam alignment files...                                       -----
------------------------------------------------------------------------------------------------------------------------

/home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/all.bam

------------------------------------------------------------------------------------------------------------------------
-----                             cutting up contigs into 10kb fragments for CONCOCT...                            -----
------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------
-----                                    estimating contig fragment coverage...                                    -----
------------------------------------------------------------------------------------------------------------------------

/home-4/yzhan231@jhu.edu/.conda/envs/metawrap-env/bin/concoct_coverage_table.py:48: FutureWarning: read_table is deprecated, use read_csv instead, passing sep='\t'.
  df = pd.read_table(fh, header=None)
usage: concoct [-h] [--coverage_file COVERAGE_FILE]
               [--composition_file COMPOSITION_FILE] [-c CLUSTERS]
               [-k KMER_LENGTH] [-t THREADS] [-l LENGTH_THRESHOLD]
               [-r READ_LENGTH] [--total_percentage_pca TOTAL_PERCENTAGE_PCA]
               [-b BASENAME] [-s SEED] [-i ITERATIONS] [-e EPSILON]
               [--no_cov_normalization] [--no_total_coverage]
               [--no_original_data] [-o] [-d] [-v]

optional arguments:
  -h, --help            show this help message and exit
  --coverage_file COVERAGE_FILE
                        specify the coverage file, containing a table where
                        each row correspond to a contig, and each column
                        correspond to a sample. The values are the average
                        coverage for this contig in that sample. All values
                        are separated with tabs.
  --composition_file COMPOSITION_FILE
                        specify the composition file, containing sequences in
                        fasta format. It is named the composition file since
                        it is used to calculate the kmer composition (the
                        genomic signature) of each contig.
  -c CLUSTERS, --clusters CLUSTERS
                        specify maximal number of clusters for VGMM, default
                        400.
  -k KMER_LENGTH, --kmer_length KMER_LENGTH
                        specify kmer length, default 4.
  -t THREADS, --threads THREADS
                        Number of threads to use
  -l LENGTH_THRESHOLD, --length_threshold LENGTH_THRESHOLD
                        specify the sequence length threshold, contigs shorter
                        than this value will not be included. Defaults to
                        1000.
  -r READ_LENGTH, --read_length READ_LENGTH
                        specify read length for coverage, default 100
  --total_percentage_pca TOTAL_PERCENTAGE_PCA
                        The percentage of variance explained by the principal
                        components for the combined data.
  -b BASENAME, --basename BASENAME
                        Specify the basename for files or directory where
                        outputwill be placed. Path to existing directory or
                        basenamewith a trailing '/' will be interpreted as a
                        directory.If not provided, current directory will be
                        used.
  -s SEED, --seed SEED  Specify an integer to use as seed for clustering. 0
                        gives a random seed, 1 is the default seed and any
                        other positive integer can be used. Other values give
                        ArgumentTypeError.
  -i ITERATIONS, --iterations ITERATIONS
                        Specify maximum number of iterations for the VBGMM.
                        Default value is 500
  -e EPSILON, --epsilon EPSILON
                        Specify the epsilon for VBGMM. Default value is 1.0e-6
  --no_cov_normalization
                        By default the coverage is normalized with regards to
                        samples, then normalized with regards of contigs and
                        finally log transformed. By setting this flag you skip
                        the normalization and only do log transorm of the
                        coverage.
  --no_total_coverage   By default, the total coverage is added as a new
                        column in the coverage data matrix, independently of
                        coverage normalization but previous to log
                        transformation. Use this tag to escape this behaviour.
  --no_original_data    By default the original data is saved to disk. For big
                        datasets, especially when a large k is used for
                        compositional data, this file can become very large.
                        Use this tag if you don't want to save the original
                        data.
  -o, --converge_out    Write convergence info to files.
  -d, --debug           Debug parameters.
  -v, --version         show program's version number and exit

------------------------------------------------------------------------------------------------------------------------
-----                                       Starting binning with CONCOCT...                                       -----
------------------------------------------------------------------------------------------------------------------------

Up and running. Check /home-4/yzhan231@jhu.edu/work/yuezhang/RockCreek/yzhan231_rock_creek_shotgun_p1_analysis/yzhan231_rock_creek_shotgun_p1/PreheimLab_metagenomics_SOP/metawrap_06222021/BINNING/work_files/concoct_out/log.txt for progress
/home-4/yzhan231@jhu.edu/.conda/envs/metawrap-env/lib/python2.7/site-packages/concoct/input.py:82: FutureWarning: read_table is deprecated, use read_csv instead, passing sep='\t'.
  cov = p.read_table(cov_file, header=0, index_col=0)
Setting 48 OMP threads
Generate input data
0,-1159623.139467,42017.210237
1,-1122676.702733,36946.436734
2,-1098233.038815,24443.663918
3,-1076118.473226,22114.565589
4,-1058478.484243,17639.988983
5,-1045998.713205,12479.771038
6,-1034866.200557,11132.512648
7,-1026404.771250,8461.429307
8,-1020458.757705,5946.013545
9,-1013878.724432,6580.033273
10,-1007942.107982,5936.616450
11,-1003789.699001,4152.408981
12,-1001389.051831,2400.647170
13,-999425.229347,1963.822484
14,-997425.697647,1999.531700
15,-995026.861113,2398.836534
16,-993334.074786,1692.786328
17,-991867.162485,1466.912301
18,-990799.791406,1067.371079
19,-989173.662136,1626.129270
20,-988428.596759,745.065377
21,-987525.668063,902.928697
22,-987091.664959,434.003104
23,-986138.496251,953.168708
24,-985024.171278,1114.324973
25,-984161.345485,862.825793
26,-983255.089443,906.256042
27,-982707.396551,547.692892
28,-982405.016276,302.380275
29,-981594.695393,810.320883
30,-981241.535200,353.160193
31,-980514.864621,726.670579
32,-980094.081472,420.783149
33,-979919.758989,174.322482
34,-979341.829801,577.929188
35,-978895.531922,446.297879
36,-977873.376274,1022.155648
37,-977260.267775,613.108499
38,-977154.025767,106.242008
39,-977060.985621,93.040146
40,-976965.709387,95.276235
41,-976838.890312,126.819075
42,-976730.149714,108.740597
43,-976582.404794,147.744921
44,-976481.286667,101.118127
45,-976114.278381,367.008286
46,-975772.931383,341.346998
47,-975434.043103,338.888280
48,-975345.497997,88.545106
49,-975263.666748,81.831249
50,-975152.457575,111.209173
51,-975083.546068,68.911508
52,-975005.412335,78.133733
53,-974906.656586,98.755749
54,-974856.540406,50.116180
55,-974753.814642,102.725764
56,-974313.392450,440.422192
57,-973853.512682,459.879768
58,-973345.378415,508.134267
59,-972914.028347,431.350069
60,-972767.462792,146.565554
61,-972337.281947,430.180845
62,-972121.187986,216.093961
63,-971684.217440,436.970546
64,-971259.706037,424.511403
65,-971122.538358,137.167680
66,-970692.337732,430.200626
67,-970491.289152,201.048579
68,-970012.575631,478.713522
69,-969575.604936,436.970694
70,-968807.631435,767.973501
71,-968391.949365,415.682070
72,-967992.644955,399.304409
73,-967864.684502,127.960453
74,-967250.072277,614.612225
75,-967202.224278,47.847999
76,-967151.348380,50.875898
77,-967076.933054,74.415326
78,-966749.373066,327.559988
79,-966648.477527,100.895539
80,-966505.569797,142.907730
81,-966179.287054,326.282743
82,-966179.295641,0.008587
83,-966169.963485,9.332157
84,-966142.162914,27.800571
85,-966070.155051,72.007864
86,-965502.663220,567.491830
87,-965497.634468,5.028752
88,-965493.629204,4.005265
89,-965462.945403,30.683801
90,-965406.058876,56.886527
91,-965363.392996,42.665880
92,-965347.674719,15.718277
93,-965351.054707,3.379988
94,-965350.887246,0.167461
95,-965330.656057,20.231189
96,-965300.560836,30.095221
97,-965269.161979,31.398857
98,-964988.940045,280.221934
99,-964967.243819,21.696226
100,-964949.527444,17.716375
101,-964906.848642,42.678802
102,-964880.824746,26.023896
103,-964886.736979,5.912233
104,-964875.086753,11.650226
105,-964868.172349,6.914404
106,-964837.204015,30.968335
107,-964829.673205,7.530809
108,-964803.912732,25.760473
109,-964805.679203,1.766471
110,-964795.407985,10.271217
111,-964753.727122,41.680864
112,-964739.774534,13.952588
113,-964718.801991,20.972543
114,-964634.066656,84.735335
115,-964545.024438,89.042218
116,-964438.814374,106.210064
117,-964054.292685,384.521689
118,-963740.492436,313.800249
119,-963739.072817,1.419619
120,-963723.547001,15.525815
121,-963720.874125,2.672877
122,-963716.592887,4.281238
123,-963697.643873,18.949014
124,-963678.073642,19.570232
125,-963661.914624,16.159017
126,-963643.606074,18.308550
127,-963630.289960,13.316114
128,-963608.633595,21.656365
129,-963587.735183,20.898412
130,-963567.209025,20.526158
131,-963554.950553,12.258473
132,-963537.192603,17.757949
133,-963502.837979,34.354625
134,-963455.670728,47.167251
135,-963146.252848,309.417880
136,-962841.106549,305.146299
137,-962839.330013,1.776535
138,-962824.895007,14.435006
139,-962795.540756,29.354251
140,-962507.524268,288.016488
141,-962523.174575,15.650308
142,-962514.396474,8.778102
143,-962490.638191,23.758282
144,-962474.424350,16.213841
145,-962468.181150,6.243201
146,-962451.706904,16.474246
147,-962448.312493,3.394411
148,-962435.223451,13.089042
149,-962428.640822,6.582629
150,-962421.407846,7.232976
151,-962431.739776,10.331930
152,-962436.098914,4.359138
153,-962440.535979,4.437065
154,-962435.740599,4.795380
155,-962422.866411,12.874187
156,-962415.374480,7.491931
157,-962414.087580,1.286900
158,-962407.345376,6.742204
159,-962414.666368,7.320992
160,-962409.334040,5.332328
161,-962397.941435,11.392605
162,-962381.779902,16.161533
163,-962391.502209,9.722307
164,-962391.952139,0.449929
165,-962389.835675,2.116464
166,-962388.905386,0.930289
167,-962387.336544,1.568842
168,-962385.224524,2.112020
169,-962383.138608,2.085916
170,-962380.143660,2.994948
171,-962376.142288,4.001371
172,-962373.166483,2.975805
173,-962368.225754,4.940729
174,-962360.875809,7.349945
175,-962350.588955,10.286854
176,-962334.210824,16.378131
177,-962297.250513,36.960311
178,-962197.465812,99.784700
179,-962068.409321,129.056492
180,-961769.460897,298.948423
181,-961773.051859,3.590962
182,-961769.079152,3.972707
183,-961766.540451,2.538701
184,-961764.574225,1.966226
185,-961761.799943,2.774281
186,-961757.423043,4.376901
187,-961758.171589,0.748546
188,-961756.507150,1.664438
189,-961752.349184,4.157967
190,-961749.156152,3.193032
191,-961747.981711,1.174441
192,-961747.154591,0.827120
193,-961744.935018,2.219573
194,-961739.012790,5.922227
195,-961739.003900,0.008891
196,-961734.313822,4.690077
197,-961733.395932,0.917891
198,-961729.371419,4.024513
199,-961727.245426,2.125993
200,-961720.549265,6.696161
201,-961714.756773,5.792492
202,-961698.413921,16.342851
203,-961675.202066,23.211856
204,-961651.073163,24.128903
205,-961637.839967,13.233195
206,-961602.553285,35.286683
207,-961559.349827,43.203457
208,-961530.186636,29.163192
209,-961492.691918,37.494717
210,-961211.182605,281.509314
211,-961213.991204,2.808600
212,-961211.185530,2.805674
213,-961208.065381,3.120148
214,-961206.028148,2.037234
215,-961204.604647,1.423501
216,-961204.137580,0.467067
217,-961206.593818,2.456238
218,-961214.505237,7.911419
219,-961199.305214,15.200023
220,-961199.803755,0.498541
221,-961200.350013,0.546258
222,-961198.650226,1.699787
223,-961192.988484,5.661741
224,-961188.432937,4.555547
225,-961179.024410,9.408528
226,-961182.911859,3.887450
227,-961183.435701,0.523842
228,-961184.206592,0.770890
229,-961185.157520,0.950929
230,-961186.099041,0.941520
231,-961186.510940,0.411899
232,-961186.541123,0.030184
233,-961186.643534,0.102411
234,-961186.711601,0.068067
235,-961186.704702,0.006900
236,-961186.632081,0.072621
237,-961186.511941,0.120140
238,-961186.360824,0.151116
239,-961186.162989,0.197836
240,-961185.819423,0.343566
241,-961185.447605,0.371818
242,-961185.223378,0.224227
243,-961185.066698,0.156681
244,-961184.928358,0.138339
245,-961184.784761,0.143597
246,-961184.612103,0.172659
247,-961184.384671,0.227432
248,-961184.086647,0.298023
249,-961183.756702,0.329945
250,-961183.514398,0.242305
251,-961183.416286,0.098112
252,-961183.392126,0.024160
253,-961183.392201,0.000075
CONCOCT Finished, the log shows how it went.
30320 948 48

------------------------------------------------------------------------------------------------------------------------
-----                                   merging 10kb fragments back into contigs                                   -----
------------------------------------------------------------------------------------------------------------------------

NODE_137_length_87153_cov_52.227548	[('40', 8)]
NODE_340_length_35666_cov_17.319199	[('123', 3)]
NODE_90_length_116092_cov_23.131751	[('56', 11)]
NODE_190_length_65701_cov_33.768242	[('75', 6)]
NODE_219_length_56222_cov_84.709669	[('128', 5)]
NODE_2_length_768405_cov_83.611443	[('59', 75), ('40', 1)], chosen: 59
NODE_314_length_38296_cov_25.440653	[('87', 3)]
NODE_27_length_242452_cov_84.442555	[('128', 24)]
NODE_87_length_118435_cov_24.101343	[('75', 11)]
NODE_484_length_24297_cov_83.286033	[('95', 1), ('59', 1)], chosen: 95
NODE_198_length_62949_cov_53.629965	[('14', 6)]
NODE_571_length_20713_cov_35.435763	[('7', 2)]
NODE_466_length_25829_cov_14.238457	[('19', 1), ('123', 1)], chosen: 19
NODE_22_length_253082_cov_25.988752	[('75', 25)]
NODE_325_length_37227_cov_24.890563	[('56', 3)]
NODE_420_length_28662_cov_55.219492	[('14', 2)]
NODE_221_length_56070_cov_87.883674	[('128', 5)]
NODE_534_length_22043_cov_14.880617	[('108', 2)]
NODE_62_length_148228_cov_72.309665	[('128', 14)]
NODE_417_length_28893_cov_33.274534	[('7', 2)]
NODE_544_length_21670_cov_10.012306	[('54', 2)]
NODE_387_length_31069_cov_16.397498	[('123', 3)]
NODE_557_length_21223_cov_10.997213	[('119', 2)]
NODE_206_length_60394_cov_25.342946	[('75', 6)]
NODE_359_length_33277_cov_29.222593	[('75', 3)]
NODE_508_length_23008_cov_25.594084	[('87', 2)]
NODE_5_length_542707_cov_40.509590	[('77', 54)]
NODE_368_length_32389_cov_14.257933	[('123', 3)]
NODE_510_length_22929_cov_10.686937	[('119', 2)]
NODE_271_length_44990_cov_29.353310	[('87', 4)]
NODE_428_length_28117_cov_73.410876	[('14', 2)]
NODE_349_length_34413_cov_16.571861	[('123', 3)]
NODE_106_length_102521_cov_20.900894	[('123', 10)]
NODE_7_length_429278_cov_69.584079	[('59', 42)]
NODE_330_length_36820_cov_12.393635	[('1', 3)]
NODE_535_length_21957_cov_24.987627	[('87', 2)]
NODE_262_length_47034_cov_154.190851	[('129', 4)]
NODE_430_length_27990_cov_9.958618	[('27', 2)]
NODE_395_length_30507_cov_9.310357	[('27', 3)]
NODE_509_length_22960_cov_18.081423	[('54', 1), ('26', 1)], chosen: 54
NODE_154_length_78686_cov_92.790248	[('128', 7)]
NODE_132_length_89662_cov_84.215764	[('128', 8)]
NODE_425_length_28322_cov_19.652563	[('123', 2)]
NODE_67_length_144258_cov_67.311443	[('40', 14)]
NODE_494_length_23776_cov_30.938788	[('7', 2)]
NODE_339_length_35706_cov_12.849093	[('1', 3)]
NODE_321_length_37547_cov_67.341913	[('14', 3)]
NODE_592_length_20259_cov_85.190012	[('128', 2)]
NODE_165_length_75157_cov_23.731112	[('87', 7)]
NODE_3_length_693972_cov_28.065612	[('75', 69)]
NODE_75_length_131294_cov_71.140880	[('95', 13)]
NODE_299_length_40090_cov_53.125490	[('14', 4)]
NODE_98_length_109363_cov_61.491327	[('40', 10)]
NODE_457_length_26518_cov_10.468881	[('123', 2)]
NODE_495_length_23672_cov_16.147521	[('123', 2)]
NODE_26_length_244971_cov_77.389219	[('128', 24)]
NODE_32_length_226004_cov_82.725951	[('59', 22)]
NODE_332_length_36250_cov_54.048101	[('14', 3)]
NODE_274_length_44752_cov_25.125803	[('75', 4)]
NODE_540_length_21788_cov_12.378963	[('24', 2)]
NODE_524_length_22425_cov_15.870854	[('35', 2)]
NODE_310_length_38794_cov_11.096853	[('123', 3)]
NODE_46_length_193098_cov_81.730392	[('128', 19)]
NODE_521_length_22551_cov_7.234975	[('111', 2)]
NODE_379_length_31670_cov_25.288534	[('87', 3)]
NODE_237_length_52699_cov_15.069467	[('119', 5)]
NODE_25_length_245530_cov_54.566013	[('40', 24)]
NODE_481_length_24682_cov_14.403622	[('123', 2)]
NODE_593_length_20204_cov_11.545982	[('24', 2)]
NODE_112_length_99156_cov_118.189403	[('129', 9)]
NODE_61_length_149542_cov_76.792009	[('128', 13), ('40', 1)], chosen: 128
NODE_13_length_315046_cov_73.857990	[('59', 31)]
NODE_311_length_38614_cov_76.085531	[('128', 3)]
NODE_216_length_56682_cov_22.968637	[('75', 5)]
NODE_47_length_188960_cov_19.582642	[('56', 18)]
NODE_11_length_336220_cov_40.321568	[('77', 30), ('40', 3)], chosen: 77
NODE_553_length_21566_cov_75.146390	[('95', 2)]
NODE_270_length_45009_cov_22.648040	[('56', 4)]
NODE_329_length_37035_cov_78.662980	[('128', 3)]
NODE_358_length_33376_cov_14.585277	[('123', 3)]
NODE_520_length_22571_cov_13.141499	[('24', 2)]
NODE_473_length_25054_cov_72.991160	[('128', 2)]
NODE_133_length_88255_cov_18.367880	[('56', 8)]
NODE_492_length_23850_cov_84.975373	[('128', 2)]
NODE_320_length_37615_cov_14.287993	[('123', 3)]
NODE_505_length_23142_cov_147.592628	[('104', 2)]
NODE_344_length_35131_cov_8.676702	[('27', 3)]
NODE_513_length_22798_cov_18.115200	[('32', 2)]
NODE_334_length_36054_cov_14.450401	[('123', 3)]
NODE_250_length_49566_cov_360.488922	[('64', 4)]
NODE_140_length_86202_cov_25.983447	[('75', 8)]
NODE_588_length_20398_cov_21.868505	[('75', 2)]
NODE_469_length_25582_cov_12.428723	[('119', 2)]
NODE_525_length_22421_cov_24.992399	[('87', 2)]
NODE_550_length_21595_cov_17.081105	[('123', 2)]
NODE_164_length_75519_cov_54.295253	[('40', 7)]
NODE_461_length_26033_cov_15.386750	[('123', 2)]
NODE_44_length_196394_cov_78.109795	[('128', 18), ('64', 1)], chosen: 128
NODE_1_length_1204867_cov_37.047160	[('77', 119), ('40', 1)], chosen: 77
NODE_17_length_289108_cov_82.005736	[('95', 27), ('40', 1)], chosen: 95
NODE_183_length_67448_cov_50.481445	[('14', 6)]
NODE_31_length_229761_cov_24.493318	[('75', 22)]
NODE_409_length_29455_cov_79.518197	[('59', 2)]
NODE_127_length_92096_cov_25.103074	[('75', 9)]
NODE_326_length_37198_cov_137.363406	[('129', 3)]
NODE_194_length_64342_cov_24.932817	[('75', 6)]
NODE_170_length_72699_cov_140.836862	[('129', 7)]
NODE_362_length_32985_cov_11.402581	[('54', 1), ('4', 2)], chosen: 4
NODE_119_length_97088_cov_30.724516	[('123', 9)]
NODE_263_length_46832_cov_67.761421	[('14', 4)]
NODE_85_length_121422_cov_64.579029	[('95', 11), ('40', 1)], chosen: 95
NODE_467_length_25764_cov_8.183982	[('6', 2)]
NODE_529_length_22246_cov_12.577081	[('1', 2)]
NODE_566_length_20825_cov_15.594222	[('119', 2)]
NODE_97_length_109505_cov_69.679178	[('128', 10)]
NODE_453_length_26606_cov_14.798124	[('24', 2)]
NODE_231_length_53057_cov_26.242972	[('87', 5)]
NODE_207_length_60374_cov_21.564051	[('123', 6)]
NODE_350_length_34316_cov_68.579755	[('40', 3)]
NODE_586_length_20431_cov_35.902876	[('7', 2)]
NODE_227_length_54818_cov_26.760678	[('123', 5)]
NODE_530_length_22196_cov_12.428662	[('24', 2)]
NODE_293_length_40650_cov_123.895677	[('129', 4)]
NODE_537_length_21885_cov_16.714796	[('119', 2)]
NODE_195_length_63951_cov_147.590945	[('104', 6)]
NODE_152_length_79483_cov_143.512489	[('104', 7)]
NODE_376_length_31883_cov_80.992491	[('128', 3)]
NODE_251_length_49186_cov_15.510350	[('26', 1), ('126', 3)], chosen: 126
NODE_222_length_55987_cov_31.211703	[('75', 5)]
NODE_39_length_203448_cov_27.776330	[('75', 20)]
NODE_246_length_50789_cov_36.014684	[('33', 5)]
NODE_465_length_25898_cov_12.377510	[('24', 2)]
NODE_148_length_81463_cov_14.026287	[('119', 8)]
NODE_547_length_21627_cov_16.096978	[('24', 2)]
NODE_500_length_23282_cov_8.776123	[('81', 2)]
NODE_562_length_21074_cov_17.301442	[('123', 2)]
NODE_415_length_29063_cov_15.521649	[('54', 2)]
NODE_490_length_23917_cov_12.374696	[('24', 2)]
NODE_265_length_46598_cov_81.286939	[('128', 4)]
NODE_573_length_20631_cov_9.693915	[('27', 2)]
NODE_79_length_127973_cov_57.516268	[('40', 12)]
NODE_82_length_123090_cov_19.300898	[('56', 12)]
NODE_488_length_23992_cov_22.012282	[('75', 2)]
NODE_452_length_26658_cov_13.970041	[('123', 2)]
NODE_447_length_26781_cov_15.519157	[('86', 2)]
NODE_523_length_22458_cov_13.450208	[('123', 2)]
NODE_41_length_200630_cov_58.202453	[('95', 20)]
NODE_347_length_34522_cov_24.439203	[('87', 3)]
NODE_424_length_28360_cov_132.128175	[('129', 2)]
NODE_317_length_38129_cov_26.466014	[('75', 3)]
NODE_16_length_292336_cov_69.520205	[('95', 29)]
NODE_23_length_252233_cov_67.065600	[('59', 25)]
NODE_569_length_20764_cov_7.941764	[('27', 2)]
NODE_29_length_232663_cov_40.186421	[('77', 23)]
NODE_89_length_116581_cov_65.345331	[('95', 11)]
NODE_382_length_31586_cov_77.333418	[('128', 3)]
NODE_224_length_55079_cov_58.766429	[('14', 5)]
NODE_448_length_26752_cov_12.177211	[('119', 2)]
NODE_255_length_48732_cov_21.442242	[('75', 4)]
NODE_587_length_20407_cov_21.977005	[('87', 2)]
NODE_335_length_35962_cov_15.167683	[('123', 3)]
NODE_173_length_70972_cov_12.515899	[('1', 7)]
NODE_377_length_31841_cov_159.626062	[('104', 3)]
NODE_570_length_20760_cov_24.717266	[('7', 2)]
NODE_319_length_37743_cov_51.136091	[('14', 3)]
NODE_528_length_22267_cov_13.400594	[('119', 2)]
NODE_187_length_66535_cov_28.696465	[('75', 6)]
NODE_134_length_87983_cov_34.306603	[('75', 8)]
NODE_449_length_26721_cov_75.518750	[('128', 2)]
NODE_254_length_48969_cov_29.570246	[('75', 4)]
NODE_28_length_242279_cov_26.461102	[('75', 23), ('58', 1)], chosen: 75
NODE_103_length_104182_cov_83.534338	[('128', 10)]
NODE_21_length_255048_cov_38.642982	[('77', 25)]
NODE_232_length_52997_cov_20.578463	[('123', 5)]
NODE_431_length_27939_cov_11.897253	[('24', 2)]
NODE_574_length_20617_cov_10.537788	[('119', 2)]
NODE_551_length_21578_cov_15.993867	[('123', 2)]
NODE_160_length_76667_cov_19.090782	[('56', 7)]
NODE_468_length_25755_cov_130.986693	[('40', 2)]
NODE_357_length_33389_cov_20.743115	[('56', 3)]
NODE_464_length_25906_cov_16.647054	[('123', 2)]
NODE_233_length_52937_cov_64.042566	[('40', 5)]
NODE_563_length_21037_cov_18.263559	[('4', 1), ('6', 1)], chosen: 4
NODE_548_length_21626_cov_16.033703	[('119', 2)]
NODE_235_length_52787_cov_88.521334	[('95', 2), ('40', 3)], chosen: 40
NODE_253_length_48992_cov_24.258782	[('87', 4)]
NODE_204_length_61797_cov_74.608225	[('95', 6)]
NODE_201_length_62214_cov_15.058865	[('1', 6)]
NODE_328_length_37055_cov_26.900757	[('75', 3)]
NODE_583_length_20486_cov_11.886790	[('24', 2)]
NODE_404_length_30031_cov_12.830931	[('24', 3)]
NODE_142_length_85284_cov_24.884394	[('87', 8)]
NODE_308_length_39243_cov_12.759391	[('123', 3)]
NODE_341_length_35594_cov_11.037002	[('119', 3)]
NODE_303_length_39914_cov_190.795354	[('129', 3)]
NODE_331_length_36342_cov_204.213740	[('129', 3)]
NODE_136_length_87300_cov_209.447223	[('129', 8)]
NODE_527_length_22289_cov_10.842314	[('121', 2)]
NODE_225_length_55066_cov_14.013870	[('119', 5)]
NODE_191_length_65497_cov_80.988891	[('95', 6)]
NODE_277_length_44423_cov_129.516386	[('129', 4)]
NODE_353_length_33718_cov_16.225797	[('119', 3)]
NODE_264_length_46674_cov_63.065038	[('40', 4)]
NODE_496_length_23642_cov_11.099165	[('108', 2)]
NODE_51_length_173693_cov_82.059273	[('128', 17)]
NODE_410_length_29319_cov_27.343562	[('7', 2)]
NODE_59_length_154655_cov_78.370796	[('95', 15)]
NODE_462_length_25995_cov_26.393254	[('87', 2)]
NODE_302_length_39921_cov_25.137486	[('123', 3)]
NODE_209_length_59879_cov_19.221216	[('123', 5)]
NODE_34_length_223916_cov_77.867016	[('128', 22)]
NODE_531_length_22171_cov_7.289655	[('43', 2)]
NODE_248_length_50016_cov_75.011689	[('128', 5)]
NODE_166_length_75095_cov_72.025959	[('128', 7)]
NODE_102_length_106081_cov_77.409437	[('128', 10)]
NODE_50_length_183598_cov_78.950497	[('128', 17), ('40', 1)], chosen: 128
NODE_406_length_29709_cov_27.779456	[('7', 2)]
NODE_202_length_62068_cov_54.675326	[('14', 6)]
NODE_596_length_20058_cov_7.242564	[('27', 2)]
NODE_145_length_83311_cov_55.729761	[('40', 8)]
NODE_35_length_219684_cov_76.031831	[('128', 21)]
NODE_438_length_27423_cov_19.576001	[('123', 2)]
NODE_301_length_39952_cov_71.532797	[('14', 3)]
NODE_9_length_377889_cov_65.524918	[('40', 37)]
NODE_84_length_122410_cov_88.419468	[('59', 12)]
NODE_472_length_25114_cov_64.551498	[('40', 2)]
NODE_60_length_150725_cov_79.092294	[('128', 14), ('40', 1)], chosen: 128
NODE_491_length_23894_cov_12.951466	[('1', 2)]
NODE_278_length_44217_cov_144.725465	[('104', 4)]
NODE_295_length_40376_cov_136.025917	[('129', 4)]
NODE_42_length_196545_cov_80.245056	[('95', 19)]
NODE_146_length_82268_cov_23.223249	[('75', 8)]
NODE_567_length_20813_cov_126.581607	[('129', 2)]
NODE_18_length_283620_cov_39.386645	[('77', 28)]
NODE_177_length_69674_cov_74.703960	[('128', 6)]
NODE_289_length_42307_cov_26.546128	[('123', 4)]
NODE_427_length_28133_cov_24.949747	[('75', 2)]
NODE_526_length_22349_cov_29.296627	[('7', 2)]
NODE_261_length_47036_cov_29.608459	[('75', 4)]
NODE_595_length_20058_cov_36.375844	[('7', 2)]
NODE_197_length_63713_cov_21.252977	[('56', 6)]
NODE_296_length_40258_cov_79.248787	[('128', 4)]
NODE_287_length_42939_cov_54.171649	[('40', 4)]
NODE_506_length_23093_cov_10.463929	[('54', 1), ('126', 1)], chosen: 54
NODE_282_length_43493_cov_64.499355	[('95', 2), ('40', 2)], chosen: 95
NODE_378_length_31705_cov_7.800126	[('6', 3)]
NODE_370_length_32273_cov_14.433453	[('123', 3)]
NODE_180_length_68740_cov_29.499265	[('87', 6)]
NODE_159_length_77444_cov_64.347788	[('40', 7)]
NODE_369_length_32342_cov_201.824945	[('129', 3)]
NODE_63_length_148125_cov_29.496900	[('75', 14)]
NODE_281_length_43594_cov_23.362778	[('75', 4)]
NODE_24_length_247247_cov_60.983207	[('95', 24)]
NODE_485_length_24277_cov_8.647593	[('6', 2)]
NODE_380_length_31607_cov_10.543896	[('98', 3)]
NODE_249_length_49573_cov_78.867361	[('128', 4)]
NODE_423_length_28428_cov_132.754908	[('129', 2)]
NODE_161_length_76390_cov_136.524661	[('129', 7)]
NODE_184_length_67311_cov_19.736708	[('123', 6)]
NODE_432_length_27711_cov_61.635088	[('40', 2)]
NODE_304_length_39886_cov_12.695388	[('1', 3)]
NODE_463_length_25913_cov_19.408036	[('56', 2)]
NODE_269_length_45437_cov_58.218435	[('14', 4)]
NODE_363_length_32925_cov_26.004229	[('75', 3)]
NODE_361_length_33178_cov_26.040848	[('75', 3)]
NODE_33_length_224969_cov_19.155788	[('56', 22)]
NODE_558_length_21196_cov_15.974268	[('119', 2)]
NODE_76_length_130501_cov_21.653435	[('56', 13)]
NODE_394_length_30511_cov_14.170147	[('119', 3)]
NODE_122_length_95399_cov_29.838280	[('75', 8), ('26', 1)], chosen: 75
NODE_93_length_112027_cov_73.763843	[('128', 11)]
NODE_306_length_39668_cov_8.781764	[('6', 3)]
NODE_116_length_97385_cov_22.844919	[('75', 9)]
NODE_450_length_26719_cov_65.339484	[('14', 2)]
NODE_163_length_75898_cov_30.813259	[('75', 7)]
NODE_538_length_21875_cov_14.835335	[('123', 2)]
NODE_131_length_89679_cov_14.679595	[('35', 8)]
NODE_128_length_91638_cov_13.682507	[('1', 9)]
NODE_414_length_29164_cov_171.056924	[('129', 2)]
NODE_96_length_110954_cov_74.232130	[('128', 10), ('64', 1)], chosen: 128
NODE_92_length_112255_cov_59.374768	[('40', 11)]
NODE_179_length_69424_cov_53.738471	[('40', 6)]
NODE_385_length_31207_cov_58.689972	[('14', 3)]
NODE_245_length_50897_cov_27.399178	[('87', 5)]
NODE_143_length_84724_cov_82.793714	[('128', 8)]
NODE_552_length_21567_cov_8.692823	[('27', 2)]
NODE_315_length_38269_cov_72.943686	[('59', 3)]
NODE_518_length_22613_cov_32.916659	[('75', 2)]
NODE_482_length_24680_cov_9.661239	[('81', 2)]
NODE_77_length_130223_cov_28.879233	[('75', 13)]
NODE_30_length_230139_cov_30.493902	[('75', 23)]
NODE_487_length_24067_cov_57.651799	[('40', 2)]
NODE_401_length_30179_cov_27.603804	[('87', 3)]
NODE_104_length_103634_cov_83.829869	[('128', 10)]
NODE_316_length_38145_cov_13.934629	[('1', 3)]
NODE_333_length_36082_cov_11.052155	[('108', 3)]
NODE_70_length_139788_cov_63.865672	[('40', 13)]
NODE_429_length_28013_cov_170.797625	[('129', 2)]
NODE_384_length_31297_cov_27.117918	[('33', 3)]
NODE_64_length_147381_cov_85.587751	[('128', 14)]
NODE_279_length_43995_cov_14.698771	[('123', 4)]
NODE_88_length_118101_cov_30.872423	[('75', 11)]
NODE_6_length_474288_cov_83.653375	[('128', 46), ('64', 1)], chosen: 128
NODE_8_length_398916_cov_27.923234	[('75', 39)]
NODE_371_length_32258_cov_90.965935	[('128', 3)]
NODE_294_length_40386_cov_81.824775	[('128', 3), ('64', 1)], chosen: 128
NODE_327_length_37081_cov_76.874521	[('59', 3)]
NODE_434_length_27642_cov_78.780948	[('40', 2)]
NODE_297_length_40218_cov_11.469661	[('24', 4)]
NODE_181_length_68680_cov_62.230572	[('14', 6)]
NODE_517_length_22619_cov_24.367577	[('87', 2)]
NODE_135_length_87871_cov_451.463970	[('64', 8)]
NODE_157_length_77980_cov_79.943381	[('128', 7)]
NODE_54_length_168313_cov_26.011506	[('75', 16)]
NODE_196_length_63741_cov_113.334281	[('129', 6)]
NODE_397_length_30287_cov_10.742524	[('19', 3)]
NODE_273_length_44804_cov_13.642629	[('1', 4)]
NODE_258_length_47734_cov_12.439040	[('119', 4)]
NODE_55_length_162039_cov_79.773576	[('128', 16)]
NODE_4_length_552050_cov_75.426073	[('59', 55)]
NODE_502_length_23242_cov_75.257472	[('59', 2)]
NODE_107_length_100876_cov_30.644280	[('75', 10)]
NODE_149_length_80720_cov_79.000310	[('128', 7), ('64', 1)], chosen: 128
NODE_220_length_56219_cov_24.678175	[('87', 5)]
NODE_69_length_139962_cov_79.670331	[('128', 13)]
NODE_451_length_26667_cov_17.252029	[('123', 2)]
NODE_101_length_106503_cov_19.911158	[('123', 10)]
NODE_188_length_66128_cov_10.150667	[('111', 6)]
NODE_71_length_138286_cov_26.631089	[('123', 13)]
NODE_266_length_46388_cov_83.925798	[('128', 4)]
NODE_126_length_92148_cov_87.370082	[('128', 9)]
NODE_285_length_43019_cov_30.597128	[('87', 4)]
NODE_193_length_64489_cov_27.884983	[('123', 6)]
NODE_226_length_54956_cov_84.818892	[('128', 5)]
NODE_48_length_186253_cov_26.598068	[('75', 18)]
NODE_559_length_21194_cov_12.760774	[('123', 2)]
NODE_386_length_31160_cov_58.532197	[('40', 3)]
NODE_360_length_33219_cov_17.382855	[('123', 3)]
NODE_455_length_26551_cov_11.886549	[('1', 2)]
NODE_115_length_98403_cov_71.897924	[('95', 9)]
NODE_313_length_38421_cov_77.893239	[('128', 3)]
NODE_192_length_65303_cov_21.292086	[('123', 6)]
NODE_37_length_211337_cov_67.233673	[('95', 21)]
NODE_168_length_73888_cov_13.130714	[('1', 7)]
NODE_129_length_91081_cov_20.983642	[('75', 9)]
NODE_507_length_23053_cov_63.629011	[('40', 2)]
NODE_111_length_99638_cov_37.328319	[('77', 9)]
NODE_437_length_27494_cov_170.811145	[('129', 2)]
NODE_577_length_20523_cov_8.131767	[('76', 2)]
NODE_498_length_23610_cov_12.920187	[('123', 2)]
NODE_120_length_96327_cov_30.641921	[('123', 9)]
NODE_45_length_193856_cov_73.869588	[('128', 18), ('58', 1)], chosen: 128
NODE_454_length_26570_cov_11.761682	[('24', 2)]
NODE_578_length_20518_cov_263.674681	[('40', 2)]
NODE_305_length_39785_cov_16.429499	[('123', 3)]
NODE_539_length_21827_cov_12.769383	[('1', 2)]
NODE_290_length_41719_cov_53.421035	[('14', 4)]
NODE_489_length_23945_cov_23.140142	[('75', 2)]
NODE_572_length_20702_cov_30.308035	[('33', 2)]
NODE_36_length_213593_cov_80.070929	[('128', 21)]
NODE_584_length_20484_cov_12.309364	[('24', 2)]
NODE_366_length_32531_cov_25.653067	[('123', 3)]
NODE_200_length_62606_cov_60.606545	[('14', 6)]
NODE_426_length_28198_cov_10.455779	[('123', 2)]
NODE_260_length_47399_cov_12.401888	[('119', 4)]
NODE_280_length_43921_cov_25.837710	[('87', 4)]
NODE_203_length_61983_cov_12.248191	[('1', 6)]
NODE_205_length_61689_cov_26.044797	[('75', 6)]
NODE_514_length_22768_cov_8.499185	[('27', 2)]
NODE_130_length_90828_cov_19.848700	[('56', 9)]
NODE_403_length_30048_cov_30.572600	[('87', 3)]
NODE_217_length_56329_cov_58.051782	[('40', 5)]
NODE_199_length_62926_cov_12.950852	[('119', 6)]
NODE_555_length_21394_cov_11.206945	[('28', 2)]
NODE_373_length_32064_cov_148.168890	[('104', 3)]
NODE_522_length_22490_cov_13.246579	[('119', 2)]
NODE_68_length_143066_cov_50.419164	[('14', 14)]
NODE_223_length_55208_cov_90.268054	[('59', 5)]
NODE_118_length_97128_cov_31.000371	[('75', 9)]
NODE_594_length_20168_cov_22.766917	[('87', 2)]
NODE_10_length_350826_cov_73.559616	[('128', 35)]
NODE_545_length_21667_cov_29.953914	[('7', 2)]
NODE_585_length_20457_cov_10.932801	[('24', 2)]
NODE_86_length_120733_cov_81.598883	[('128', 11), ('64', 1)], chosen: 128
NODE_172_length_71255_cov_19.863666	[('123', 7)]
NODE_375_length_31894_cov_21.088005	[('56', 3)]
NODE_515_length_22694_cov_15.594726	[('123', 2)]
NODE_399_length_30205_cov_20.303814	[('56', 3)]
NODE_243_length_50962_cov_82.913313	[('128', 4), ('59', 1)], chosen: 128
NODE_374_length_31964_cov_78.587577	[('128', 3)]
NODE_208_length_60222_cov_13.450862	[('1', 6)]
NODE_416_length_28974_cov_156.605346	[('129', 2)]
NODE_259_length_47720_cov_24.600608	[('87', 4)]
NODE_580_length_20506_cov_27.140238	[('75', 2)]
NODE_440_length_27264_cov_18.099489	[('24', 1), ('26', 1)], chosen: 24
NODE_124_length_94342_cov_62.980326	[('40', 9)]
NODE_541_length_21740_cov_13.874291	[('1', 2)]
NODE_125_length_94079_cov_74.209393	[('128', 9)]
NODE_228_length_54202_cov_85.797440	[('128', 5)]
NODE_475_length_24937_cov_15.026163	[('123', 2)]
NODE_456_length_26543_cov_14.160148	[('119', 2)]
NODE_543_length_21731_cov_8.969044	[('27', 2)]
NODE_396_length_30291_cov_12.992459	[('54', 1), ('126', 2)], chosen: 126
NODE_421_length_28591_cov_23.823206	[('108', 2)]
NODE_58_length_155328_cov_22.864716	[('75', 15)]
NODE_460_length_26312_cov_25.266748	[('87', 2)]
NODE_458_length_26415_cov_83.113998	[('128', 2)]
NODE_238_length_52123_cov_32.670546	[('123', 5)]
NODE_497_length_23635_cov_11.544190	[('19', 1), ('54', 1)], chosen: 19
NODE_477_length_24823_cov_11.626090	[('98', 2)]
NODE_356_length_33496_cov_9.904279	[('3', 1), ('4', 1), ('6', 1)], chosen: 3
NODE_155_length_78169_cov_54.137095	[('14', 7)]
NODE_309_length_38857_cov_56.531983	[('40', 3)]
NODE_355_length_33496_cov_12.728328	[('1', 3)]
NODE_211_length_59495_cov_140.015983	[('104', 5)]
NODE_392_length_30621_cov_96.433684	[('128', 3)]
NODE_276_length_44488_cov_84.924403	[('128', 4)]
NODE_256_length_48265_cov_23.865007	[('56', 4)]
NODE_174_length_69979_cov_27.890338	[('123', 6)]
NODE_12_length_334083_cov_61.457605	[('95', 33)]
NODE_444_length_26880_cov_16.084063	[('54', 2)]
NODE_213_length_58171_cov_14.724138	[('119', 5)]
NODE_275_length_44668_cov_91.462332	[('128', 4)]
NODE_418_length_28832_cov_76.277235	[('128', 2)]
NODE_307_length_39243_cov_26.810478	[('108', 3)]
NODE_337_length_35775_cov_20.549384	[('123', 3)]
NODE_413_length_29189_cov_99.373618	[('128', 2)]
NODE_446_length_26794_cov_20.950933	[('75', 2)]
NODE_352_length_33759_cov_168.615328	[('129', 3)]
NODE_240_length_51650_cov_77.368776	[('128', 5)]
NODE_554_length_21455_cov_14.376495	[('123', 2)]
NODE_241_length_51295_cov_15.311378	[('123', 5)]
NODE_400_length_30183_cov_26.740905	[('75', 3)]
NODE_343_length_35374_cov_87.135564	[('128', 3)]
NODE_323_length_37378_cov_171.784369	[('129', 3)]
NODE_348_length_34505_cov_21.407054	[('56', 3)]
NODE_471_length_25147_cov_22.423442	[('75', 2)]
NODE_591_length_20328_cov_11.608889	[('24', 2)]
NODE_74_length_133735_cov_74.342998	[('128', 13)]
NODE_388_length_30999_cov_11.928678	[('24', 3)]
NODE_442_length_27192_cov_25.509784	[('123', 2)]
NODE_156_length_78073_cov_12.796560	[('119', 7)]
NODE_504_length_23180_cov_23.936303	[('75', 2)]
NODE_108_length_100335_cov_31.250110	[('75', 10)]
NODE_105_length_102715_cov_19.432291	[('56', 10)]
NODE_336_length_35957_cov_29.118545	[('75', 3)]
NODE_144_length_83859_cov_20.338027	[('123', 8)]
NODE_91_length_114845_cov_147.401525	[('129', 11)]
NODE_346_length_34655_cov_24.486329	[('87', 3)]
NODE_121_length_95434_cov_81.157624	[('128', 9)]
NODE_257_length_48054_cov_19.659722	[('123', 4)]
NODE_158_length_77959_cov_176.767586	[('129', 7)]
NODE_78_length_130108_cov_79.431063	[('128', 13)]
NODE_49_length_185387_cov_80.475163	[('128', 18)]
NODE_239_length_51983_cov_24.393911	[('56', 5)]
NODE_139_length_86455_cov_29.492431	[('75', 8)]
NODE_419_length_28733_cov_11.559732	[('24', 2)]
NODE_56_length_157932_cov_19.666766	[('123', 15)]
NODE_483_length_24488_cov_12.588630	[('119', 2)]
NODE_182_length_68604_cov_31.320034	[('87', 6)]
NODE_284_length_43157_cov_88.870540	[('128', 4)]
NODE_162_length_76108_cov_76.355660	[('128', 7)]
NODE_52_length_170385_cov_77.746521	[('128', 17)]
NODE_267_length_46069_cov_146.399118	[('129', 4)]
NODE_568_length_20807_cov_43.350906	[('7', 2)]
NODE_218_length_56275_cov_61.800907	[('40', 5)]
NODE_141_length_85627_cov_159.272835	[('104', 8)]
NODE_354_length_33672_cov_55.644555	[('14', 3)]
NODE_242_length_51251_cov_29.419662	[('75', 5)]
NODE_318_length_37918_cov_65.918232	[('14', 3)]
NODE_65_length_146604_cov_83.784686	[('128', 14)]
NODE_443_length_27015_cov_25.266395	[('123', 2)]
NODE_478_length_24701_cov_10.473343	[('123', 2)]
NODE_402_length_30065_cov_12.188837	[('1', 3)]
NODE_288_length_42882_cov_56.206272	[('40', 4)]
NODE_176_length_69816_cov_27.400252	[('123', 6)]
NODE_493_length_23830_cov_23.164627	[('56', 2)]
NODE_393_length_30537_cov_71.983958	[('128', 3)]
NODE_291_length_41307_cov_20.594735	[('123', 4)]
NODE_110_length_99665_cov_73.801978	[('128', 9)]
NODE_365_length_32590_cov_84.168188	[('128', 3)]
NODE_117_length_97374_cov_13.617444	[('1', 9)]
NODE_372_length_32256_cov_14.241545	[('35', 3)]
NODE_57_length_157906_cov_79.175064	[('128', 15)]
NODE_272_length_44864_cov_81.339173	[('128', 4)]
NODE_100_length_106550_cov_82.491572	[('128', 10)]
NODE_556_length_21363_cov_12.122020	[('24', 2)]
NODE_390_length_30729_cov_76.103899	[('128', 3)]
NODE_422_length_28431_cov_13.863300	[('24', 2)]
NODE_589_length_20389_cov_180.247910	[('129', 2)]
NODE_283_length_43424_cov_16.257142	[('54', 4)]
NODE_435_length_27604_cov_13.563941	[('1', 2)]
NODE_189_length_66121_cov_21.182166	[('56', 6)]
NODE_582_length_20505_cov_14.740244	[('35', 2)]
NODE_549_length_21604_cov_8.361966	[('4', 1), ('126', 1)], chosen: 4
NODE_324_length_37281_cov_18.705179	[('56', 3)]
NODE_298_length_40110_cov_16.114792	[('123', 4)]
NODE_81_length_126016_cov_54.046213	[('40', 12)]
NODE_186_length_66618_cov_13.665385	[('1', 6)]
NODE_167_length_74064_cov_13.243268	[('119', 7)]
NODE_244_length_50914_cov_14.232250	[('1', 5)]
NODE_383_length_31584_cov_9.798344	[('27', 3)]
NODE_408_length_29668_cov_13.197346	[('1', 2)]
NODE_499_length_23375_cov_183.308319	[('129', 2)]
NODE_138_length_87123_cov_37.340171	[('75', 8)]
NODE_561_length_21132_cov_87.948190	[('128', 2)]
NODE_441_length_27229_cov_74.288953	[('40', 2)]
NODE_185_length_66724_cov_79.806657	[('128', 6)]
NODE_73_length_133741_cov_27.050821	[('75', 13)]
NODE_95_length_111231_cov_27.111931	[('75', 11)]
NODE_459_length_26408_cov_12.635032	[('123', 2)]
NODE_114_length_98474_cov_27.825054	[('75', 9)]
NODE_66_length_145741_cov_14.672426	[('119', 14)]
NODE_40_length_202314_cov_74.668188	[('128', 20)]
NODE_564_length_20998_cov_23.499355	[('123', 2)]
NODE_364_length_32846_cov_17.237992	[('123', 3)]
NODE_171_length_72481_cov_25.820313	[('123', 7)]
NODE_389_length_30951_cov_80.141119	[('128', 3)]
NODE_151_length_80280_cov_148.031299	[('129', 8)]
NODE_542_length_21739_cov_12.172754	[('123', 2)]
NODE_169_length_73665_cov_29.858104	[('75', 7)]
NODE_80_length_126103_cov_56.517136	[('40', 12)]
NODE_470_length_25334_cov_27.992523	[('87', 2)]
NODE_99_length_109174_cov_75.832385	[('128', 10)]
NODE_511_length_22828_cov_55.887279	[('14', 2)]
NODE_234_length_52800_cov_160.343179	[('129', 5)]
NODE_407_length_29689_cov_30.212324	[('123', 2)]
NODE_123_length_95135_cov_18.475210	[('123', 9)]
NODE_532_length_22145_cov_7.959484	[('27', 2)]
NODE_19_length_263192_cov_75.119075	[('59', 26)]
NODE_53_length_168746_cov_76.249438	[('128', 16)]
NODE_516_length_22677_cov_10.064141	[('54', 2)]
NODE_474_length_24979_cov_78.468905	[('128', 2)]
NODE_436_length_27548_cov_10.098971	[('58', 2)]
NODE_113_length_98846_cov_85.870828	[('59', 8), ('40', 1)], chosen: 59
NODE_476_length_24929_cov_183.036343	[('5', 2)]
NODE_581_length_20505_cov_16.613839	[('56', 2)]
NODE_236_length_52768_cov_14.313794	[('101', 1), ('111', 4)], chosen: 111
NODE_175_length_69922_cov_20.031331	[('123', 6)]
NODE_322_length_37379_cov_24.437145	[('56', 3)]
NODE_351_length_33807_cov_10.716817	[('24', 3)]
NODE_109_length_99670_cov_29.499232	[('75', 9)]
NODE_38_length_210864_cov_36.064020	[('75', 21)]
NODE_43_length_196463_cov_82.209202	[('128', 19)]
NODE_210_length_59738_cov_94.630900	[('59', 3), ('40', 2)], chosen: 59
NODE_15_length_294377_cov_72.049775	[('59', 28), ('40', 1)], chosen: 59
NODE_300_length_39980_cov_121.095805	[('129', 3)]
NODE_268_length_45955_cov_29.873856	[('75', 4)]
NODE_178_length_69505_cov_21.027473	[('56', 6)]
NODE_381_length_31597_cov_17.580623	[('123', 3)]
NODE_150_length_80494_cov_24.585611	[('75', 8)]
NODE_247_length_50222_cov_25.178225	[('56', 5)]
NODE_338_length_35740_cov_13.754967	[('54', 2), ('113', 1)], chosen: 54
NODE_20_length_257131_cov_76.643288	[('59', 25)]
NODE_411_length_29285_cov_16.778549	[('123', 2)]
NODE_576_length_20560_cov_7.992831	[('6', 2)]
NODE_501_length_23260_cov_13.468089	[('119', 2)]
NODE_575_length_20582_cov_23.012374	[('87', 2)]
NODE_342_length_35536_cov_23.292889	[('56', 3)]
NODE_412_length_29223_cov_9.947168	[('123', 2)]
NODE_345_length_34693_cov_143.574311	[('104', 3)]
NODE_512_length_22827_cov_13.235289	[('119', 2)]
NODE_94_length_111873_cov_14.803690	[('123', 11)]
NODE_579_length_20514_cov_10.688548	[('123', 2)]
NODE_153_length_78875_cov_14.782238	[('119', 7)]
NODE_533_length_22141_cov_43.425700	[('7', 2)]
NODE_147_length_81936_cov_20.013715	[('56', 8)]
NODE_433_length_27660_cov_73.411266	[('128', 2)]
NODE_519_length_22603_cov_19.787032	[('123', 2)]
NODE_312_length_38510_cov_13.390872	[('119', 3)]
NODE_560_length_21151_cov_10.696530	[('24', 2)]
NODE_292_length_41265_cov_12.341179	[('119', 4)]
NODE_212_length_58738_cov_79.646627	[('95', 5)]
NODE_405_length_29720_cov_15.172527	[('119', 2)]
NODE_546_length_21628_cov_14.257544	[('35', 2)]
NODE_536_length_21951_cov_13.997853	[('119', 2)]
NODE_503_length_23197_cov_10.165241	[('123', 2)]
NODE_367_length_32500_cov_20.302635	[('56', 3)]
NODE_286_length_42992_cov_50.144677	[('14', 4)]
NODE_83_length_122565_cov_74.160052	[('128', 12)]
NODE_230_length_53685_cov_68.494891	[('128', 5)]
NODE_565_length_20854_cov_11.403769	[('119', 2)]
NODE_391_length_30632_cov_272.884913	[('64', 1), ('59', 1), ('40', 1)], chosen: 64
NODE_398_length_30262_cov_17.020889	[('123', 3)]
NODE_14_length_313648_cov_77.731961	[('128', 31)]
NODE_445_length_26807_cov_12.586050	[('24', 2)]
NODE_229_length_53905_cov_52.913965	[('40', 5)]
NODE_72_length_137190_cov_71.247238	[('59', 13)]
NODE_439_length_27320_cov_10.033046	[('27', 2)]
NODE_214_length_57843_cov_21.692981	[('123', 5)]
NODE_480_length_24687_cov_8.780651	[('81', 2)]
NODE_590_length_20378_cov_9.228214	[('54', 2)]
NODE_486_length_24239_cov_115.025347	[('129', 2)]
NODE_479_length_24695_cov_15.528856	[('123', 2)]
NODE_215_length_57702_cov_157.115271	[('104', 5)]
NODE_252_length_49117_cov_51.359443	[('14', 4)]

------------------------------------------------------------------------------------------------------------------------
-----                                          splitting contigs into bins                                         -----
------------------------------------------------------------------------------------------------------------------------

Loading in the bins that the contigs belong to...
Going through the entire assembly and splitting contigs into their respective bin file...
Done!

------------------------------------------------------------------------------------------------------------------------
-----                              CONCOCT finished successfully, and found 135 bins!                              -----
------------------------------------------------------------------------------------------------------------------------


########################################################################################################################
#####                                   BINNING PIPELINE SUCCESSFULLY FINISHED!!!                                  #####
########################################################################################################################


real	33m48.848s
user	282m24.865s
sys	17m37.990s
